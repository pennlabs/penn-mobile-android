plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.gms.google-services'
    id 'jacoco'
}

apply plugin: 'kotlin-android-extensions'

android {
    namespace 'com.pennapps.labs.pennmobile'
    buildFeatures {
        buildConfig = true
    }
    buildTypes {
        debug {
            matchingFallbacks = ['qa', 'release']
            testCoverageEnabled true
        }
        release {}
    }
    buildFeatures {
        viewBinding true
    }
    compileSdkVersion 33
    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 33
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        buildConfigField ("String", "PLATFORM_REDIRECT_URI", getPlatformRedirectUri())
        buildConfigField ("String", "PLATFORM_CLIENT_ID", getPlatformClientID())
    }
    packagingOptions {
        pickFirst 'META-INF/LICENSE.txt'
        pickFirst 'META-INF/NOTICE.txt'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation(platform("com.google.firebase:firebase-bom:31.5.0"))

    implementation 'com.google.firebase:firebase-analytics'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'com.google.maps:google-maps-services:2.2.0'
    implementation 'org.jsoup:jsoup:1.16.2'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.percentlayout:percentlayout:1.0.0'
    implementation 'androidx.exifinterface:exifinterface:1.3.6'
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation 'com.google.android.gms:play-services-maps:18.2.0'
    implementation 'com.google.android.gms:play-services-location:21.0.1'
    implementation 'joda-time:joda-time:2.12.5'
    implementation 'org.apache.commons:commons-lang3:3.13.0'
    implementation 'androidx.annotation:annotation:1.7.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.0'
    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.2.0'
    implementation ("androidx.lifecycle:lifecycle-extensions:2.2.0@aar") {
        transitive = true
    }
    implementation 'com.squareup.retrofit:retrofit:1.9.0'
    implementation 'com.squareup.picasso:picasso:2.71828'
    implementation 'com.squareup.okhttp:okhttp:2.7.5'
    implementation 'io.reactivex:rxandroid:1.2.1'
    implementation 'androidx.browser:browser:1.5.0'
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.daimajia.swipelayout:library:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'org.testng:testng:7.8.0'
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.github.ahorn:android-rss:master-SNAPSHOT'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3'
    implementation 'com.eightbitlab:supportrenderscriptblur:1.0.2'
    implementation 'androidx.palette:palette-ktx:1.0.0'
    implementation 'com.github.searchy2:CustomAlertViewDialogue:2.6.1'
    implementation 'com.airbnb.android:lottie:5.2.0'
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.11'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'com.kaspersky.android-components:kaspresso:1.5.3'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-moshi:2.9.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

}

String getPlatformClientID() {
    def propFile = rootProject.file("./local.properties")
    def properties = new Properties()
    properties.load(new FileInputStream(propFile))
    System.out.println(properties.toString())
    return properties['PLATFORM_CLIENT_ID']
}

String getPlatformRedirectUri() {
    def propFile = rootProject.file("./local.properties")
    def properties = new Properties()
    properties.load(new FileInputStream(propFile))
    System.out.println(properties.toString())
    return properties['PLATFORM_REDIRECT_URI']
}

// Code Coverage: https://www.raywenderlich.com/10562143-continuous-integration-for-android#toc-anchor-014

jacoco {
  toolVersion = "0.8.11"
}

// https://stackoverflow.com/questions/68065743/cannot-run-gradle-test-tasks-because-of-java-lang-noclassdeffounderror-jdk-inte
tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

// Files with such regex patterns are to be excluded
def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*',
                  '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']

// Location of generated output classes
def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug",
   excludes: fileFilter)

// Source code directory
def mainSrc = "$project.projectDir/src/main/java"

// Task declaration

task jacocoTestReport(type: JacocoReport) {
  // Runs only after the dependencies are executed
  dependsOn = ['testDebugUnitTest', 'createDebugCoverageReport']
  // Export formats
  /*reports {
    xml.enabled = true
    html.enabled = true
  }*/

  sourceDirectories.setFrom(files([mainSrc]))
  classDirectories.setFrom(files([debugTree]))

  // Inform Gradle where the files generated by test cases - are located
  executionData.from = fileTree(dir: project.buildDir, includes: [
      'jacoco/testDebugUnitTest.exec'
//      'outputs/code_coverage/debugAndroidTest/connected/*.ec'
  ])
}
