buildscript {
    repositories {
        mavenCentral()
        google()
        maven { url "https://jitpack.io" }
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'idea'
apply plugin: 'com.google.gms.google-services'  // Google Services plugin
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'jacoco' // Code Coverage

repositories {
    mavenCentral()
    google()
    jcenter()
    maven { url "https://jitpack.io" }
}

android {
    buildTypes {
        debug {
            matchingFallbacks = ['qa', 'release']
            testCoverageEnabled true

        }
        release {}
    }
    compileSdkVersion 29
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
    }
    packagingOptions {
        pickFirst 'META-INF/LICENSE.txt'
        pickFirst 'META-INF/NOTICE.txt'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.google.firebase:firebase-analytics:17.4.1'
    implementation 'com.google.firebase:firebase-crashlytics:17.0.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'com.google.maps:google-maps-services:0.13.0'
    implementation 'org.jsoup:jsoup:1.13.1'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.percentlayout:percentlayout:1.0.0'
    implementation 'androidx.exifinterface:exifinterface:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    implementation 'com.google.android.gms:play-services-location:17.0.0'
    implementation 'joda-time:joda-time:2.10.6'
    implementation 'org.apache.commons:commons-lang3:3.10'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'com.jakewharton:butterknife:10.2.1'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.1'
    implementation 'com.squareup.retrofit:retrofit:1.9.0'
    implementation 'com.squareup.picasso:picasso:2.71828'
    implementation 'com.squareup.okhttp:okhttp:2.7.5'
    implementation 'io.reactivex:rxandroid:1.2.1'
    implementation 'androidx.browser:browser:1.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.daimajia.swipelayout:library:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'org.testng:testng:7.1.0'
    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.3'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.github.ahorn:android-rss:master-SNAPSHOT'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    // official release is several years old and is not thread-safe

    implementation 'com.github.bumptech.glide:glide:4.11.0' // Glide for gif loading
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.6.0'
}



jacoco {
  toolVersion = "0.8.5"
}

tasks.withType(Test) {
  jacoco.includeNoLocationClasses = true
}

// Files with such regex patterns are to be excluded 
def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*',
                  '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']

// Location of generated output classes 
def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", 
   excludes: fileFilter)

// Source code directory
def mainSrc = "$project.projectDir/src/main/java"

// Task declaration
task jacocoTestReport(type: JacocoReport) {
  // Runs only after the dependencies are executed 
  dependsOn = ['testDebugUnitTest', 'createDebugCoverageReport']
  // Export formats
  reports {
    xml.enabled = true
    html.enabled = true
  }
 
  sourceDirectories.setFrom(files([mainSrc]))
  classDirectories.setFrom(files([debugTree]))
  
  // Inform Gradle where the files generated by test cases - are located
  executionData.from = fileTree(dir: project.buildDir, includes: [
      'jacoco/testDebugUnitTest.exec',
      'outputs/code_coverage/debugAndroidTest/connected/*.ec'
  ])
}

// Task declaration
task jacocoTestCoverageVerification(type: JacocoCoverageVerification) {
    // Run only after the test reports are generated
    dependsOn = ['jacocoTestReport']
    enabled = true
    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec',
            'outputs/code_coverage/debugAndroidTest/connected/*.ec'
    ])

    violationRules {
        failOnViolation = true 
        // 1
        rule {
            enabled = true
            element = 'PACKAGE'
            includes = ['com.raywenderlich.android.simplecalculator.operators']
            limit {
                counter = 'CLASS'
                value = 'MISSEDCOUNT'
                maximum = 0
            }
        }
        // 2
        rule {
            element = 'PACKAGE'
            includes = ['com.raywenderlich.android.simplecalculator']
            limit {
                value = 'COVEREDRATIO'
                counter = 'INSTRUCTION'
                minimum = 0.005
            }
        }

    }
}
// Make the check gradle task depend on the above task so that failure of above task will fail the check task
check.dependsOn jacocoTestCoverageVerification