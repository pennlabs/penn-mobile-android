name: CI Workflow
# Run this workflow every time a new commit pushed to your repository
on: push

jobs:
  lint:
    name: linting to make armaan happy
    runs-on: ubuntu-latest
    steps:
    # Checks out a copy of your repository on the ubuntu-latest machine
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Java JDK
      - name: Setup JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      # Get the secrets from GitHub and add them to local.properties
      # https://blog.jakelee.co.uk/accessing-android-app-secret-from-github-actions-using-gradle/
      - name: Access PLATFORM_CLIENT_ID
        env:
          PLATFORM_CLIENT_ID: ${{ secrets.PLATFORM_CLIENT_ID }}
        run: echo PLATFORM_CLIENT_ID=\"$PLATFORM_CLIENT_ID\" >> ./local.properties

      - name: Access PLATFORM_REDIRECT_URI
        env:
          PLATFORM_REDIRECT_URI: ${{ secrets.PLATFORM_REDIRECT_URI }}
        run: echo PLATFORM_REDIRECT_URI=\"$PLATFORM_REDIRECT_URI\" >> ./local.properties
      # Run unit tests
      - name: Lint that S***!!
        run: ./gradlew lint 
  unit-tests:
    name: Run Unit Tests
    runs-on: macos-latest
    needs: lint
    steps:
      # Checks out a copy of your repository on the ubuntu-latest machine
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Java JDK
      - name: Setup JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      # Get the secrets from GitHub and add them to local.properties
      # https://blog.jakelee.co.uk/accessing-android-app-secret-from-github-actions-using-gradle/
      - name: Access PLATFORM_CLIENT_ID
        env:
          PLATFORM_CLIENT_ID: ${{ secrets.PLATFORM_CLIENT_ID }}
        run: echo PLATFORM_CLIENT_ID=\"$PLATFORM_CLIENT_ID\" >> ./local.properties

      - name: Access PLATFORM_REDIRECT_URI
        env:
          PLATFORM_REDIRECT_URI: ${{ secrets.PLATFORM_REDIRECT_URI }}
        run: echo PLATFORM_REDIRECT_URI=\"$PLATFORM_REDIRECT_URI\" >> ./local.properties
      # Run unit tests
      - name: Run Unit Tests
        run: ./gradlew testDebugUnitTest
  
  # If tests pass, generate and upload APK
  generate-apk:
    name: Generate apk
    runs-on: ubuntu-latest
    needs: unit-tests
    # Generate APK only if we are pushing to master, UNCOMMENT BEFORE MERGE TO MASTER
#    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v1

      - name: Setup JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      # Get the secrets from GitHub and add them to local.properties
      - name: Access PLATFORM_CLIENT_ID
        env:
          PLATFORM_CLIENT_ID: ${{ secrets.PLATFORM_CLIENT_ID }}
        run: echo PLATFORM_CLIENT_ID=\"$PLATFORM_CLIENT_ID\" >> ./local.properties

      - name: Access PLATFORM_REDIRECT_URI
        env:
          PLATFORM_REDIRECT_URI: ${{ secrets.PLATFORM_REDIRECT_URI }}
        run: echo PLATFORM_REDIRECT_URI=\"$PLATFORM_REDIRECT_URI\" >> ./local.properties

      - name: Generate apk
        run: ./gradlew assembleDebug
      
      # Upload APK to GitHub
      - name: Upload APK
        uses: actions/upload-artifact@v1
        with:
          name: build-output
          path: PennMobile/build/outputs/apk/debug/PennMobile-debug.apk

  code-cov:
    name: JaCoCo Code Coverage 
    runs-on: macos-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v1

      - name: Setup JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      # Get the secrets from GitHub and add them to local.properties
      - name: Access PLATFORM_CLIENT_ID
        env:
          PLATFORM_CLIENT_ID: ${{ secrets.PLATFORM_CLIENT_ID }}
        run: echo PLATFORM_CLIENT_ID=\"$PLATFORM_CLIENT_ID\" >> ./local.properties

      - name: Access PLATFORM_REDIRECT_URI
        env:
          PLATFORM_REDIRECT_URI: ${{ secrets.PLATFORM_REDIRECT_URI }}
        run: echo PLATFORM_REDIRECT_URI=\"$PLATFORM_REDIRECT_URI\" >> ./local.properties

      # Run JaCoCo, generate Test Report
      - name: Check Code Coverage
        run: ./gradlew jacocoTestReport --stacktrace

      # Upload reports to GitHub Actions
      - name: Upload Reports
        uses: actions/upload-artifact@v1
        with:
          name: reports
          path: PennMobile/build/reports